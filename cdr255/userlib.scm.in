#|
This program is a part of @PACKAGE_STRING@.

@LICENSE@

Bug Reports: @PACKAGE_BUGREPORT@
Homepage: @PACKAGE_URL@
Documentation: @PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@
|#
(define-module (cdr255 userlib)
  #:version (0 2 0)
  #:use-module (ice-9 textual-ports)
  #:use-module (ice-9 string-fun)
  #:use-module (ice-9 regex)
  #:use-module (ice-9 popen)
  #:export (add-section-to-filename
            apply-recursive-regexp-replacement
            assignment-string->assignment-list
            clean-assignment-list
            dereference-env
            dereference-env-in-assignment-list
            dereference-env-in-string
            dereference-envs-in-assignment-list
            dump-string-to-file
            find-file-extension
            get-file-as-string
            iteratively-replace-regexp
            remove-c-multiline-comments-from-string
            remove-empty-strings
            remove-regexp-from-string
            remove-substring-from-assignment-list
            replace-regexp-in-string
            set-env-from-list
            join-lines
            join-lines-with-header
            generate-package-flags
            filter-symbol-list
            generate-string-fill
            generate-string-space-fill
            generate-flag-descriptions
            generate-flags
            generate-value-section
            generate-help-string
            generate-deps-string
            generate-deps-lines
            flatten-list
            generate-list-of-needed-directories
            compute-dependent-directories
            compute-directory-dependency
            compute-directory-list
            shell-output-to-string
            missing-commands
            sort-two-string-alist))

(define (dereference-env variable)
  "Return the value of the variable in the environment, or an empty string.

This is an ACTION.

Arguments
=========
VARIABLE <string>: The variable to be dereferenced.

Returns
=======
A <string> representing the value of the variable. If the variable is unset in
the current environment, the string is an empty string.

Impurities
==========
Depends on the state of the environment."
  (let ((value (getenv variable)))
    (cond ((not value)
           ".")
          (else
           value))))
(define (dereference-env-in-string variable string-to-work-on)
  "Take a string and an environment variable, and replace the environment
variable with the value in the current environment.

This is an ACTION.

Arguments
=========
VARIABLE <string>: The Environment Variable itself.
STRING-TO-WORK-ON <string>: The original string.

Returns
=======
A <string> with all instances of \"$VARIABLE\" replaced by the value thereof.

Impurities
============
Depends on the local environment state."
  (string-replace-substring string-to-work-on
                            (string-append "$" variable)
                            (dereference-env variable)))
(define (get-file-as-string file)
  "Slurp the contents of a file and return them as a string.

This is an ACTION.

Arguments
=========
FILE <string>: The name of the file to slurp.

Returns
=======
A <string> representing the contents of the FILE.

Impurities
==========
Depends on the state of the FILE."
  (call-with-input-file file get-string-all))
(define (assignment-string->assignment-list assignment-string)
  "Take a string and turn it into a list of the assignments.

This is a CALCULATION.

Arguments
=========
ORIGIN <string>: The original string, which should have statements delimited by
newlines ('\n') and assigments using '='.

Returns
=======
A <<list> of <lists> of <strings>>, in the form:

'((variable assignment)(variable assignment))

Impurities
==========
None."
  (clean-assignment-list
   (map (lambda (x)
          (string-split x #\=))
        (string-split assignment-string #\newline))))
(define (set-env-from-list assignment-list)
  "Set environment variables according to the assignment list.

This is an ACTION.

Arguments
=========
ASSIGNMENT-LIST <<list> of <lists> of <strings>>: A list of assignments in the
form:

'((variable assignment)(variable assignment))

Returns
=======
#<undefined>

Impurities
==========
Entirely based on manipulating an outside environment."
  (map (lambda (x)
         (setenv (car x) (cadr x)))
       assignment-list))
(define (clean-assignment-list unclean-list)
  "Take a list and remove the non-assignment members.

This is a CALCULATION.

Assignment members are those that are exactly '(a b), where a and b are both
strings and a should be set to equal b.

Arguments
=========
UNCLEAN-LIST <<list> of <lists> of <strings>>: A list containing both assignment
and non-assignment members.

Returns
=======
A <<list> of <lists> of <strings>> entirely consisting of assignment members.

Impurities
===========
None."
  (filter
   (lambda (x)
     (and
      (= (length x) 2)
      (string? (car x))
      (string? (cadr x))
      (not (string-index (car x) #\ ))
      (if (>= (string-length (car x)) 6)
          (not (string= (substring (car x) 0 6) "export")))))
   unclean-list))
(define (dereference-env-in-assignment-list variable assignment-list)
  "Dereference an environment variable across all elements of an assignment list.

This is an ACTION.

Arguments
=========
VARIABLE <string>: The variable to be dereferenced.

ASSIGNMENT-LIST <<list> of <lists> of <strings>>: A list of assignments in the
form:

'((variable assignment)(variable assignment))

Returns
=======
A <<list> of <lists> of <strings>> with all instances of VARIABLE in the string
replaced by the value of that variable in the environment. If the variable is
unset, VARIABLE is removed from the string.

Impurities
==========
Depends on the state of the environment."
  (map (lambda (x)
         (list (dereference-env-in-string variable (car x))
               (dereference-env-in-string variable (cadr x))))
       assignment-list))
(define (remove-substring-from-assignment-list substring assignment-list)
  "Remove a substring across all elements of an assignment list.

This is a CALCULATION.

Arguments
=========
SUBSTRING <string>: The substring to be removed.
ASSIGNMENT-LIST <<list> of <lists> of <strings>>: A list of assignments in the
form:

'((variable assignment)(variable assignment))

Returns
=======
A <<list> of <lists> of <strings>> with the SUBSTRING removed from every string.

Impurities
==========
None."
  (map (lambda (x)
         (list (string-replace-substring (car x) substring "")
               (string-replace-substring (cadr x) substring "")))
       assignment-list))
(define (dereference-envs-in-assignment-list list-of-variables assignment-list)
  "Dereference all variables given across all members of an assignment list.

This is an ACTION.

Arguments
=========
LIST-OF-VARIABLES <<list> of <string>>: The variables to be dereferenced.
 
ASSIGNMENT-LIST <<list> of <lists> of <strings>>: A list of assignments in the
form:

'((variable assignment)(variable assignment))

Returns
=======

A <<list> of <lists> of <strings>> with all instances of each member of the
LIST-OF-VARIABLES in the string replaced by the value of that variable in the
environment. If the variable is unset, the member is removed from the string.

Impurities
==========
Depends on the state of the environment."
  (cond ((= (length list-of-variables) 1)
         (dereference-env-in-assignment-list
          (car list-of-variables)
          assignment-list))
        (else
         (dereference-envs-in-assignment-list
          (cdr list-of-variables)
          (dereference-env-in-assignment-list
           (car list-of-variables)
           assignment-list)))))
(define (dump-string-to-file file string)
  "Dump a STRING to a specific FILE.

This is an ACTION.

Arguments
=========
FILE <string>: The path and name of the file to save the string to.
STRING <string>: The (intended) contents of the file.

Returns
=======
Unspecified.


Impurities
==========
Write to a file on disk."
  (call-with-output-file file
    (lambda (port)
      (put-string port
                  string))))
(define (replace-regexp-in-string regexp replacement original-string)
  "Replace matches of REGEXP with REPLACEMENT in ORIGINAL-STRING.

This is a CALCULATION.

Arguments
=========

REGEXP<string>: A POSIX-extended regular expression string, escaped for guile
scheme.

REPLACEMENT<string>: A literal replacement for matches to REGEXP; will appear
in the result verbatim.

ORIGINAL-STRING<string>: The string before any modification.

Returns
=======
A <string> representing ORIGINAL-STRING with all matches of REGEXP replaced
by REPLACEMENT.

Impurities
==========
None."
  (regexp-substitute/global #f regexp original-string 'pre replacement
                            'post))
(define (remove-regexp-from-string regexp original-string)
  "Remove all matches of REGEXP from the ORIGINAL-STRING.

This is a CALCULATION.

Arguments
=========
REGEXP<string>: A POSIX-extended regular expression string, escaped for guile
scheme.

ORIGINAL-STRING<string>: The string before any modification.

Returns
=======
A <string> representing ORIGINAL-STRING with all matches of REGEXP removed.

Impurities
==========
None."
  (replace-regexp-in-string regexp "" original-string))
(define (apply-recursive-regexp-replacement original-string
                                            replacement-alist)
  "Apply recursive edits to ORIGINAL STRING as defined by REPLACEMENT-ALIST.

This is a CALCULATION.

Arguments
=========
ORIGINAL-STRING<string>: The string before any modification.

REPLACEMENT-ALIST<<alist> of <strings>>: An association list that pairs a
                                         POSIX-extended regular expression
                                         string with what it should be
                                         replaced by, in the order that the
                                         replacements should be made.

Returns
=======
A <string> representing ORIGINAL-STRING after all of the replacements have
been applied.

Impurities
==========
None."
  (cond ((= (length replacement-alist) 0)
         original-string)
        (else
         (let ((current (car replacement-alist)))
           (apply-recursive-regexp-replacement
            (replace-regexp-in-string (car current)
                                      (cadr current)
                                      original-string)
            (cdr replacement-alist))))))
(define (remove-c-multiline-comments-from-string original-string)
  "Remove all C-Style Multiline Comments from ORIGINAL-STRING.

This is a CALCULATION.

Arguments
=========
ORIGINAL-STRING<string>: The string before any modification.

Returns
=======

A <string> representing ORIGINAL-STRING with all C-Style Multiline Comments
Removed.

Impurities
==========
None."
  (let ((replacement-alist '(("\n" "⍝")
                             ("/\\*\\*" "")
                             ("⍝ +\\*[^⍝]+" "")
                             (" +\\*⍝" "⍝")
                             (" *⍝ +⍝" "⍝")
                             (" *⍝+" "⍝")
                             ("⍝+" "\n"))))
    (apply-recursive-regexp-replacement original-string
                                        replacement-alist)))

(define (find-file-extension filename)
  "Isolate the file extension in FILENAME.

This is a CALCULATION.

Arguments
=========
FILENAME<string>: The filename/path for which to find an extension.

Returns
=======
A <string> representing the file extension (with dot) present in
FILENAME. #false if no extension is found.

Impurities
==========
None."
  (let ((index (string-rindex filename #\.)))
    (if index
        (string-drop filename index)
        index)))
(define (add-section-to-filename section filename)
  "Add SECTION to FILENAME, before the extension (if it exists).

This is a CALCULATION.

Arguments
=========
SECTION<string>: The section to add before the extesion of the filename.
FILENAME<string>: The original filename to add the extension to.

Returns
=======

A <string> representing FILENAME with SECTION added before the
extension. Assumes a dot delimited filename.

Impurities
==========
None."
  (let ((extension (find-file-extension (basename filename)))
        (directory (if (string= (dirname filename) ".")
                       ""
                       (string-append
                        (dirname filename)
                        "/"))))
    (string-append directory
                   (if extension
                       (basename filename extension)
                       (basename filename))
                   "."
                   section
                   (if extension
                       extension))))
(define (remove-empty-strings original-list)
  "Remove all empty strings from ORIGINAL-LIST.

This is a CALCULATION.

Arguments
=========
ORIGINAL-LIST<<list> of <strings>>: A parsed list of strings that may have
                                    empties.

Returns
=======
A <<list> of <strings>> including every non-empty-string from ORIGINAL-LIST.

Impurities
==========
None."
  (filter (lambda (x) (not (string= "" x)))
          original-list))
(define (iteratively-replace-regexp regexp original-list replacement-list)
  "Replace all matches for REGEXP in each member of ORIGINAL-LIST with each
member of REPLACEMENT-LIST.

This is a CALCULATION.

Arguments
=========
REGEXP<string>: A POSIX-extended regular expression string, escaped for guile
scheme.

ORIGINAL-LIST<<list> of <strings>>: The original list, containing parts that
match REGEXP.

REPLACEMENT-LIST<<list> of <strings>>: The list of substitutions for REGEXP,
that will replace matches in ORIGINAL-LIST.

Returns
=======

A <<list> of <strings>> representing each member of ORIGINAL-LIST with each
member of REPLACEMENT-LIST in the place of REGEXP matches. Will return a list
of size (* (length original-list) (length replacement-list)).

Impurities
==========
None."
  (apply append (map
                 (lambda (x)
                   (map (lambda (y)
                          (replace-regexp-in-string regexp x y))
                        original-list)) replacement-list)))
(define (join-lines list-of-lines)
  "Creates one long string with each member of LIST-OF-LINES on a seperate
line.

This is a CALCULATION.

Arguments
=========

LIST-OF-LINES <<list> of <strings>>: A list of strings, with each one
representing an entire line.

Returns
=======
A <string> representing all of the members of LIST-OF-LINES on a separate
lines.

Impurities
==========
None."
   (string-join
    list-of-lines
    "\n"
    'infix))

(define (join-lines-with-header header list-of-lines next)
  "Combine the HEADER and LIST-OF-LINES into a string, optionally with a
spacer included… if something is NEXT.

This is a CALCULATION.

Arguments
=========
HEADER <string>: The text to use as the heading of the section.

LIST-OF-LINES <<list> of <strings>>: A list of strings, with each one
representing an entire line.

NEXT <boolean>: Whether to include the empty line to separate this section
from another one.

Returns
=======
A <string> representing the section that is an amalgamation of the above
parameters.

Impurities
==========
None."
  (if list-of-lines
      (string-append
       header
       "\n\n"
       (join-lines list-of-lines)
       (if next
           "\n\n"
           ""))
      ""))

(define (generate-package-flags option-spec description-alist)
  "Generate a string representing the various command line flags/config files
for a script.

This is a CALCULATION.

Arguments
=========
OPTION-SPEC <<list> of <lists>>: An alist in the correct form for
getopt-long. Example:

'((version (single-char #\\v) (value #f))
    (help (single-char #\\h) (value #f)))

DESCRIPTION-ALIST <<list> of <lists>>: An alist starting with symbols that
match each of the long-options in the OPTION-SPEC, followed by a category
symbol (either 'action or 'option), and finally a string
representing the description of that option. Example:

'((help action \"Display this help\")
  (version option \"Display version info\"))

Returns
=======
A <string> outlining all of the supplied flags, for use in a --help text.

Impurities
==========
None."
  (let* ((flag-descriptions
         (generate-flag-descriptions option-spec description-alist))
         (actions (filter-symbol-list flag-descriptions 'action))
         (options (filter-symbol-list flag-descriptions 'option)))
    (string-append
     (join-lines-with-header "Actions:" actions (or options))
     (join-lines-with-header "Options:" options #f))))

(define (filter-symbol-list alist symbol)
  "Filter ALIST to only include those members that start with SYMBOL.

This is a CALCULATION.

Arguments
=========
ALIST <<list> of <lists>>: An association list starting with symbols, which
may repeat.

SYMBOL <symbol>:  A symbol to use as the match for filtering ALIST.

Returns
=======
A <<list> of <lists>> which contains all of the members of ALIST that start
with SYMBOL.

Impurities
==========
None."
  (let ((result (map cadr
                     (filter (lambda (x) (eq? symbol (car x))) alist))))
    (if (eq? '() result)
        #f
        result)))

(define (generate-string-fill pre-string start-column fill-character)
  "Generate a string to use for spacing purposes.

This is a CALCULATION.

Arguments
=========
PRE-STRING <string>: A string to use as the prior part of the current line,
for formatting purposes.

START-COLUMN <number>: The target column at which the next string should
start.

FILL-CHARACTER <character>: The character use as a filler for indentation
purposes.

Returns
=======
A <string> to append to a pre-existing string for indenting the string
appended to it properly.

Impurities
==========
None."
  (let ((indent (- start-column (string-length pre-string))))
    (if (> indent 0)
        (make-string indent
                     fill-character)
        (string-append "\n"
                       (make-string start-column fill-character)))))

(define (generate-string-space-fill pre-string start-column)
"Generate a string made of spaces for indentation purposes.

This is a CALCULATION.

Arguments
=========
PRE-STRING <string>: A string to use as the prior part of the current line,
for formatting purposes.

START-COLUMN <number>: The target column at which the next string should
start.

Returns
=======
A <string> to append to a pre-existing string for indenting the string
appended to it properly, with spaces.

Impurities
==========
None."
  (generate-string-fill pre-string start-column #\ ))


(define (generate-flag-descriptions option-spec description-alist)
  "Generate the descriptive lines for the flags in OPTION-SPEC, using
DESCRIPTION-ALIST as the extra information needed.

This is a CALCULATION.

Arguments
=========
OPTION-SPEC <<list> of <lists>>: An alist in the correct form for
getopt-long. Example:

'((version (single-char #\\v) (value #f))
    (help (single-char #\\h) (value #f)))

DESCRIPTION-ALIST <<list> of <lists>>: An alist starting with symbols that
match each of the long-options in the OPTION-SPEC, followed by a category
symbol (either 'action or 'option), and finally a string
representing the description of that option. Example:

'((help action \"Display this help\")
  (version option \"Display version info\"))

Returns
=======
A <<list> of <lists>> with each member starting with a category symbol,
followed by a full description string for the flag.


Impurities
==========
None."
  (let* ((flags (generate-flags option-spec)))
    (map (lambda (x)
           (let ((description (assoc-ref description-alist (car x)))
                 (flag (cadr x)))
             (list
              (car description)
             (string-append
              flag
              (generate-string-space-fill flag 32)
              (cadr
               description)))))
         flags)))

(define (generate-flags option-spec)
  "Generate the flag portion ('-x, --example') of the help text for cli
options, or flags.

This is a CALCULATION.

Arguments
=========
OPTION-SPEC <<list> of <lists>>: An alist in the correct form for
getopt-long. Example:

'((version (single-char #\\v) (value #f))
    (help (single-char #\\h) (value #f)))

Returns
=======
A <<list> of <lists>>, with the long option for each flag at the start of
each member, followed by a string representing the flag portion of the help
text for that long option.

Impurities
==========
None."
  (let ((option-symbols (map car option-spec)))
    (map (lambda (x)
           (let* ((flag (assoc-ref option-spec x))
                  (value-needed (car (assoc-ref flag 'value))))
             (list
              x
              (string-append
              "  -"
              (string (car (assoc-ref flag 'single-char)))
              (generate-value-section value-needed #f "foo")
              ", --"
              (symbol->string x)
              (generate-value-section value-needed #t "foo")))))
         option-symbols)))

(define (generate-value-section value-needed long variable)
  "Generate the portion of the flag section (if needed) to represent the flag
takes an argument.

This is a CALCULATION.

Arguments
=========
VALUE-NEEDED <boolean>: Whether an argument representation is needed.

LONG <boolean>: Whether we're making an argument for a long option.

VARIABLE <string>: The string to use as the argument in the example.

Returns
=======
A <string> representing the argument portion of a flag.

Impurities
==========
None."
  (if value-needed
      (string-append
       (if long
           "="
           " ")
       variable)
      ""))

(define (generate-help-string usage option-spec description-alist notes license)
  "Generate the help string for a script.

This is a CALCULATION.

Arguments
=========
USAGE <string>: A string to quickly explain the order of cli options, with
little explanation.

OPTION-SPEC <<list> of <lists>>: An alist in the correct form for
getopt-long. Example:

'((version (single-char #\\v) (value #f))
    (help (single-char #\\h) (value #f)))

DESCRIPTION-ALIST <<list> of <lists>>: An alist starting with symbols that
match each of the long-options in the OPTION-SPEC, followed by a category
symbol (either 'action or 'option), and finally a string
representing the description of that option. Example:

'((help action \"Display this help\")
  (version option \"Display version info\"))

NOTES <<list> of <strings>>: What to include in the notes section, if
anything.

LICENSE <string>: A string explaining the license and communication
information for the package this script belongs to.

Returns
=======
A <string> to use for the --help flag of a script.

Impurities
==========
None."
  (string-append usage
                 "\n\n"
                 (generate-package-flags option-spec description-alist)
                 "\n\n"
                 (if notes
                     (join-lines-with-header
                      "Notes:"
                      notes
                      #t)
                     "")
                 license
                 "\n"))

(define (generate-deps-string deps-list)
  "Generate a dependency error string for a script.

This is a CALCULATION.

Arguments
=========
DEPS-LIST <<list> of <lists>>: A list of pairs of strings, with the first
string representing a needed command for the script, and the second string
representing the package the command comes from.

Returns
=======
A <string> for use in scripts to direct the user to install needed
dependencies.

Impurities
==========
None."
  (string-append
   "Error: One or more of the following programs was not found in Your\n"
   "$PATH. Please ensure they are all installed before using this script.\n\n"
   (join-lines
    (generate-deps-lines deps-list))
   "\n\n"))

(define (generate-deps-lines deps-list)
  "Creates the actual dependency lines for the dependency string.

This is a CALCULATION.

Arguments
=========
DEPS-LIST <<list> of <lists>>: A list of pairs of strings, with the first
string representing a needed command for the script, and the second string
representing the package the command comes from.

Returns
=======
A <<list> of <strings>> with each member representing a needed external
command and its package.

Impurities
==========
None."
  (map (lambda (x)
         (string-append
          "  - "
          (car x)
          " ("
          (cadr x)
          ")"))
       deps-list))

(define (compute-directory-list directories)
  "Transform a list of directory strings into a list of lists of strings,
each representing one directory level.

This is a CALCULATION.

Arguments
=========

DIRECTORIES <<list> of <strings>>: Each directory string in question, in a
single list.

Returns
=======

A <<list> of <lists> of <strings>>, with each member-list representing one
original directory string, and each member thereof representing one directory
level of that original string.

Impurities
==========
None."
  (map (lambda (x)
         (reverse (string-split x #\/)))
       directories))

(define (compute-directory-dependency directory-list)
  "Takes a list of directory levels, and returns each level with all of the
levels it depends on prepended to it.

This is a CALCULATION.

Arguments
=========

DIRECTORY-LIST <<list> of <strings>>: A list representing one original
directory string, with each member thereof representing one directory level
of that original string.

Returns
=======

A <<list> of <strings>> representing one original directory string, with each
member thereof representing one directory level of the original string, with
all dependent levels prepended to it, in reverse order, with the deepest
directory first.

Impurities
==========
None."
  (cond ((= (length directory-list) 0)
         '())
        (else
         (cons
          (string-join (reverse directory-list) "/" 'infix)
          (compute-directory-dependency (cdr directory-list))))))

(define (compute-dependent-directories directory-list)
  "Compute the dependecy list for each directory list provided.

This is a CALCULATION.

Arguments
=========

DIRECTORY-LIST <<list> of <lists> of <strings>>: A list with each member-list
representing one original directory string, and each member thereof
representing one directory level of that original string.

Returns
=======

A <<list> of <lists> of <strings>>, with each member-list representing one
original directory string, with each member thereof representing one
directory level of the original string, with all dependent levels prepended
to it, in order from shallowest to deepest level.

Impurities
==========
None."
  (map (lambda (x)
         (reverse
          (compute-directory-dependency x)))
       directory-list))

(define (generate-list-of-needed-directories directories)
  "Generate a list of directories needed to exist for the given directories
to exist. Can be fed to mkdir.

This is a CALCULATION.

Arguments
=========

DIRECTORIES <<list> of <strings>>: Each directory string in question, in a
single list.


Returns
=======

A <<list> of <strings>> representing all of the original directory strings,
with each member representing one directory level of the original list with
all dependent levels prepended to it, in ascending order, with all duplicates
removed.


Impurities
==========
None."
  (let ((directory-list (compute-directory-list directories)))
    (delete-duplicates
     (flatten-list
      (compute-dependent-directories directory-list)))))

(define (flatten-list list-to-flatten)
  "Take a nested list and flatten it to one level.

This is a CALCULATION.

Arguments
=========

LIST-TO-FLATTEN <list>: The original list.

Returns
=======

A <list> with only one level, preserving the order of the arguments.


Impurities
==========
None."
  (cond ((null? list-to-flatten)
         '())
        ((pair? list-to-flatten)
         (append (flatten-list (car list-to-flatten))
                 (flatten-list (cdr list-to-flatten))))
        (else
         (list list-to-flatten))))

(define (shell-output-to-string command)
  "Run the COMMAND specified, capturing the output as a string.

This is an ACTION.

Arguments
=========

COMMAND <string>: The command meant to be run in the shell.

Returns
=======

A <string> representing the output of COMMAND, without leading or trailing
whitespace.

Impurities
==========
Relies on System State, Executes Arbitrary Commands."

  (let* ((port (open-input-pipe command))
         (str (get-string-all port)))
    (close-pipe port)
    (string-trim-both str)))


(define (sort-two-string-alist two-string-alist)
  "Sort the given TWO-STRING-ALIST in ascending order according to each
node's first string.

This is a CALCULATION.

Arguments
=========

TWO-STRING-ALIST <<list> of <lists> of <strings>>: An alist with two strings
per node.

Returns
=======

The same <<list> of <lists> of <strings>>, but in ascending order by first
element.

Impurities
==========

None."
  (sort-list two-string-alist (lambda (x y)
                                           (string< (car x) (car y)))))

(define (build-needed-command-list two-string-alist)
  "Build a standardized and sorted command-and-package string from the given
TWO-STRING-ALIST.

This is a CALCULATION.

Arguments
=========

TWO-STRING-ALIST <<list> of <lists> of <strings>>: An alist with two strings
per node. The first represents a command to check for, and the second
represents the package that provides that command.

Returns
=======

A <string> representing the commands listed in TWO-STRING-ALIST in a
standardized, ascending-order format of:

- bar (BarPackage)
- foo (FooPackage)

Impurities
==========

None."
  (string-join (map (lambda (x)
                      (string-append
                       "- "
                       (car x)
                       " ("
                       (cadr x)
                       ")"))
                    (sort-two-string-alist
                     two-string-alist))
               "\n"
               'infix))

(define (check-for-missing-commands two-string-alist path)
  "Check for the commands from TWO-STRING-ALIST inside of PATH.

This is an ACTION.

Arguments
=========

TWO-STRING-ALIST <<list> of <lists> of <strings>>: An alist with two strings
per node. The first represents a command to check for, and the second
represents the package that provides that command.

PATH <<list> of <strings>>: A representation of a POSIX-style PATH, with each
string representing one directory in which to look for a program.

Returns
=======

<true> if all commands in TWO-STRING-ALIST exist inside of PATH. <false>
otherwise.

Impurities
==========

Relies on state of underlying system."
  (let ((commands (map car two-string-alist)))
    (reduce (lambda (current last)
              (and current last)) #t
              (map (lambda (x)
                     (search-path path x))
                   commands))))

(define (build-missing-command-string two-string-alist check-results)
  "Check for the commands from TWO-STRING-ALIST inside of PATH.

This is a CALCULATION.

Arguments
=========

TWO-STRING-ALIST <<list> of <lists> of <strings>>: An alist with two strings
per node. The first represents a command to check for, and the second
represents the package that provides that command.

CHECK-RESULTS <boolean>: Whether the check for all of the programs in
TWO-STRING-ALIST was successful.

Returns
=======

A <string> representing the whole of the required programs and in which
packages they may be found, or (if all needed commands were found) an empty
string.

Impurities
==========

None."
  (if (not check-results)
      (string-append
       "ERROR: One or more of the following programs was not found\n"
       "       in Your $PATH. Please ensure they are all installed\n"
       "       before using this program.\n\n"
       (build-needed-command-list two-string-alist))
      ""))

(define (missing-commands command-and-package-alist)
  "Check that all specified commands in COMMAND-AND-PACKAGE-ALIST are
available.

This is an ACTION.

Arguments
=========

COMMAND-AND-PACKAGE-ALIST <<list> of <lists> of <strings>>: A two-string
alist. The first represents a command to check for, and the second represents
the package that provides that command.

Returns
=======

<false> if all commands are available in user's PATH. A <string> representing
the whole of the required programs and in which packages they may be found
otherwise.

Impurities
==========
Relies on state of underlying system."
  (let* ((path (string-split (getenv "PATH") #\:))
         (check-results (check-for-missing-commands
                         command-and-package-alist
                         path))
         (result (build-missing-command-string
                  command-and-package-alist
                  check-results)))
    (if (string= "" result)
        #f
        result)))

(define (get-or-create-configuration-file file-path-with-HOME defaults)
  "Get the contents of the file at FILE-PATH-WITH-HOME. If it doesn't exist
yet, create it using DEFAULTS and then get the contents.

This is an ACTION.

Arguments
=========

FILE-PATH-WITH-HOME <string>: Where the configuration file is located. Can
make use of the HOME environment variable.

DEFAULTS <string>: The defaults to dump into the configuration file when it
does not exist.

Returns
=======

The contents of the file at FILE-PATH-WITH-HOME, as a <string>. If the
configuration file was just created, an empty <string>.

Impurities
==========

Relies on the state of the underlying system."
  (let ((file
         (dereference-env-in-string
          "HOME"
          file-path-with-HOME)))
    (if (not (file-exists? file))
        (begin
          (dump-string-to-file
           file
           defaults)
          (display
           (string-append
            "Created default configuration file:\n"
            file
            "\n\nEdit that for Your needs, then run this program again."))
          "")
        (get-file-as-string
         file))))
