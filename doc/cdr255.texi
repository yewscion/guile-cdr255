@c Variables: project-name Project Name project-category
\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename guile-cdr255.info
@documentencoding UTF-8
@settitle cdr255 Guile Library Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2022 Christopher Rodriguez

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* guile cdr255: (guile-cdr255).   
@end direntry

@titlepage
@title The cdr255 Guile Library Manual
@author Christopher Rodriguez

@page
@vskip 0pt plus 1filll

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top guile cdr255

This document describes guile cdr255 version @value{VERSION}.

@menu
* Introduction::                Why Guile Cdr255?
* Userlib::                     Procedures for End-User Scripting.
* Game Tools::                  Procedures for Making/Playing Games.
* Combinators::                 Procedures to Combine Procedures.

* Concept Index::               Concepts Used, and Where.
* Programming Index::           Functions, Variables, Etc.

* Procedure Types::             Data, Calculations, and Actions.
* GNU FDL::                     The License for this Manual.

@detailmenu
 --- The Detailed Node Listing ---

Introduction
Userlib

* Environment Variables::       Interfacing with the User Environment.
* Assignment List Tools::       Assignment Lists and Relevant Procedures.
* File Tools::                  Tools to Interface with Files and Filenames.
* Regular Expressions::         Using Pattern Matching for Text Processing.

Game Tools

* Dice::                        Emulating Physical RNG.

Combinators

* Combinators::                 Gluing procedures together.


@end detailmenu
@end menu

@c *********************************************************************
@node Introduction, Utility Scripts, Top, Top
@chapter Introduction

The purpose of this library is to collect small, useful procedures that
I hope to use to avoid rewriting things over and over again in my day to
day life.

I began this project when I converted from writing scripts in bash to
writing them in Guile, and it seemed like the easiest path forward for
me.

I've published this publicly in the hopes that it might be of use to
someone at some point, though I also just wanted a convenient place to
pull it from into my own GNU Guix Home configuration.

@c *********************************************************************
@node Utility Scripts, Userlib, Introduction, Introduction
@section Utility Scripts

I've also included a few utility scripts (for now). As the library grows
in size, these will likely be moved to their own project, as I mainly
want this to be a library at heart.

@enumerate

@item
@command{set-gitconfig} - Apply the config specified in
@file{$HOME/.config/gitconfig} to the user's global @file{~/.gitconfig},
through @command{git}.

@end enumerate

@c *********************************************************************
@node Userlib,  Environment Variables, Utility Scripts, Top
@chapter Userlib

This module is specifically supposed to collect procedures useful for
enabling scripting by a user.

The functions here all deal with environment codeiables, reading and
writing files, displaying pretty-printed output, and running other
programs.

@menu

* Environment Variables::      Interacting with Environment Variables.
* Assignment List Tools::      Working with Lists of Assignments.
* File Tools::                 Working with Files.
* Regular Expressions::        Working with EREs.
@end menu


@c *********************************************************************
@node Environment Variables, Assignment List Tools, Userlib, Userlib
@section Environment Variables
These procedures all deal with environment codeiables, which are somewhat
of a nuisance to use in stock GNU Guile.

@c *********************************************************************
@deffn {Scheme Procedure} dereference-env @code{codeiable}
@ref{ACTION}.

Look up the environment codeiable @code{codeiable} in the running
environment, and return that value as a string.

@emph{Note:} The specified codeiable shouldn't be preceded by a sigil
(for instance, bash uses @code{$}) that denotes it as an environment
codeiable. Just include the name of the codeiable itself@footnote{So, to
dereference @code{$HOME}, use "HOME" as @code{codeiable}.}.

@lisp
(use-modules (cdr255 userlib))

(dereference-env "HOME")) @result{} "/home/user"
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} dereference-env-in-assignment-list @
       @code{codeiable} @code{assignment-list}
@deffnx {Scheme Procedure} dereference-envs-in-assignment-list @
        @code{list-of-codeiables} @code{assignment-list}
@ref{ACTION}

These procedures both operate on an assignment list, and dereference at
least one codeiable in all the elements (codeiables @emph{and} values)
therein. The @code{list-of-codeiables} is expected to be a flat list of
strings. Each returns an assignment list with all occurences of the
specified codeiable(s) replaced with their values (or removed if they are
unset in the current environment).

@lisp
(use-modules (cdr255 userlib))

(define test-assign-list '(("Var1" "$HOME/foo")
                           ("Var2" "$HOME/bar")))

(dereference-env-in-assignment-list "HOME" test-assign-list) @result{}

'(("Var1" "/home/user/foo")
  ("Var2" "/home/user/bar"))
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} dereference-env-in-string @code{codeiable} @
       @code{string-to-work-on}
@ref{ACTION}

Look up the environment codeiable @code{codeiable} (using
@code{dereference-env}), and replace all occurences of that codeiable
inside of @code{string-to-work-on}, returning the modified string.

@lisp
(use-modules (cdr255 userlib))

(dereference-env-in-string
   "HOME" "$HOME/file") @result{} /home/user/file
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} set-env-from-list @code{assignment-list}
@ref{ACTION}

Take an @code{assignment-list} and interpret it as a set of environment
codeiables, setting them in the local environment.

@lisp
(use-modules (cdr255 userlib))

(getenv "VARIABLEONE") @result{} ""
(getenv "VARIABLETWO") @result{} "foo"

(define test-list '(("VARIABLEONE" "foo")
                    ("VARIABLETWO" "bar")))

(set-env-from-list test-list)

(getenv "VARIABLEONE") @result{} "foo"
(getenv "VARIABLETWO") @result{} "bar"
@end lisp
@end deffn

@c *********************************************************************
@node Assignment List Tools, File Tools, Environment Variables, Userlib
@section Assignment List Tools
These procedures all operate on assignment lists, and don't fit anywhere
else.

@c *********************************************************************
@deffn {Scheme Procedure} assignment-string->assignment-list @
       @code{assignment-string}
@ref{CALCULATION}

This procedure takes a string (@code{assignment-string}) that's expected
to be:

@enumerate
@item Newline (\n) delimited.
@item Made up of assignments done with the equals (=) sign.
@end enumerate

And converts the string into an assignment list, returning it for
use.

If two assignments occur on the same line (no newline between them),
this @emph{will not} work. Any members that end up as invalid members
for an assignment list are removed.

@lisp
(use-modules (cdr255 userlib))

(define test-string "A=1\nB=2 C=3\nD=4\nfoo\nbar")

(assignment-string->assignment-list test-string) @result{}

'(("A" "1") ("B" "2 C" "3") ("D" "4") ("foo") ("bar")) @result{}

'(("A" "1") ("D" "4"))
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} clean-assignment-list @code{unclean-list}
@ref{CALCULATION}

This procedure takes an @code{unclean-list} of lists that are both valid
and invalid members for an assignment list, and returns an assignment
list made out of just the valid members.

@lisp
(use-modules (cdr255 userlib))

(define test-list '(("A" "1")
                    ("foo" "bar" "baz")
                    ("B" "2")
                    (C 3)
                    ("Test Var" "test")
                    ("exporting" "true")))

(clean-assignment-list test-list) @result{} '(("A" "1") ("B" "2"))
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} remove-substring-from-assignment-list @
       @code{substring} @code{assignment-list}
@ref{CALCULATION}

This procedure takes a @code{substring} and removes it across every
member of an @code{assignment-list} (both codeiable and value members,
included). It then returns the new assignment list, with all instances
of the @code{substring} removed.

@lisp
(use-modules (cdr255 userlib))

(define test-list '(("fooOne" "1")
                    ("Two" "2foo")))

(remove-substring-from-assignment-list "foo" test-list) @result{}

'(("One" "1")
  ("Two" "2"))
@end lisp
@end deffn

@c *********************************************************************
@subsection What are Assignment Lists?
@cindex Assignment List
@anchor{Assignment List}

Oftentimes, end-user work is simply a matter of taking something and
associating it with something else. These kinds of Association Lists are
popular, and Guile has support for them @xref{Association Lists, , ,
guile}.

However, they are both a little overkill and a little too general for
using with shell-based environments. So, instead, this library defines a
subset of alist with a few very strict limitations:

@enumerate

@item There can only be two members per association.
@item Both members @emph{must} be strings.
@item The key/car/first member is the codeiable member.
@item The codeiable member cannot have a space in it.
@item The codeiable member cannot start with "export".
@item The value/cadr/second member is the value member.

@end enumerate

In short, all "Assignment Lists" referenced in this library are expected
to be lists of lists of strings, in the form:

@lisp
(list ("Variable" "Value")
      ("Variable" "Value")
      @dots{})
@end lisp

@c *********************************************************************
@node File Tools, Regular Expressions, Assignment List Tools, Userlib
@section File Tools
These procedures all work on/with/around files, in some fashion.

@c *********************************************************************
@deffn {Scheme Procedure} get-file-as-string @code{file}
@ref{ACTION}

Slurp the entirety @code{file} into memory, and return that data as a
string.

@lisp
(use-modules (cdr255 userlib))

(get-file-as-string "file.txt") @result{}

"Contents of File\nAs a String"
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} dump-string-to-file @code{file} @code{string}
@ref{ACTION}

Dump @code{string} into @code{file}, overwriting any content already
stored there.
@lisp
(use-modules (cdr255 userlib))

(dump-string-to-file "file.txt" "Testing!") @result{}

"Testing!"
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} find-file-extension @code{filename}
@ref{CALCULATION}

Extract the file extension from @code{filename} if it exists. Return
@code{#f} otherwise.

This include the '.' separator in the match and result, allowing it to
be appended to anything to create a filename with extension.
@lisp
(use-modules (cdr255 userlib))

(find-file-extension "file.txt") @result{}

".txt"
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} add-section-to-filename @code{section}
@code{filename}
@ref{ACTION}

Insert @code{section} at the end of @code{filename} (but before the file
extension, if it exists).

Assumes a dot-delimited filename, like @samp{foo.bar.baz.txt}.

@lisp
(use-modules (cdr255 userlib))

(add-section-to-filename "foo" "testing.txt" @result{}

"testing.foo.txt"
@end lisp
@end deffn
@c *********************************************************************
@node Regular Expressions, Game Tools, File Tools, Userlib
@section Regular Expressions
These procedures are all meant to make modifying strings using
POSIX-Extended Regular Expressions (@acronym{ERE}) easier.


@c *********************************************************************
@deffn {Scheme Procedure} replace-regexp-in-string @code{regexp}
@code{replacement} @code{original-string}
@ref{CALCULATION}

Replace all matches of @code{regexp} with @code{replacement} in
@code{original-string}.

This is a greedy match; It will match the largest possible match first,
and so needs to account for negatives manually. There is no lazy
matching in @acronym{ERE}.

@lisp
(use-modules (cdr255 userlib))

(replace-regexp-in-string " +" " " "Hello       World     !") @result{}

"Hello World !"
@end lisp
@end deffn
@c *********************************************************************
@deffn {Scheme Procedure} remove-regexp-from-string @code{regexp}
@code{original-string}
@ref{CALCULATION}

Remove all matches of @code{regexp} from the @code{original-string}.

This is a greedy match; It will match the largest possible match first,
and so needs to account for negatives manually. There is no lazy
matching in @acronym{ERE}.

This is a convenience procedure more than anything else, as removing a
regexp's matches from a string is a common operation.

@lisp
(use-modules (cdr255 userlib))

(remove-regexp-from-string " +" "Hello       World     !") @result{}

"HelloWorld!"
@end lisp
@end deffn
@c *********************************************************************
@deffn {Scheme Procedure} apply-recursive-regexp-replacement
@code{original-string} @code{replacement-alist}
@ref{CALCULATION}

Apply recursive edits to @code{original-string} as defined by
@code{replacement-alist}.

The @code{replacement-alist} is expected to be a list of pairs, with
@code{(car pair)} being a valid @acronym{ERE} string, and @code{(cadr
pair)} being the intended replacement for all matches. As an example:

@lisp
(define example-replacement-alist '((" +" " ")
                                    (" " "-")))
(apply-recursive-regexp-replacement "Hello       World     !"
                                    example-replacement-alist) @result{}
"Hello-World-!"
@end lisp

First, @code{apply-recursive-regexp-replacement} will replace all
matches to " +" (that is, a sequence of one or more space characters)
with " " (a single space character). This leads us to "Hello World
!". Next, @code{apply-recursive-regexp-replacement} will replace all
matches to " " (a single space character) with "-" (a single hypen
character), which gives us the result.

This is meant to help eliminate some of the complexity required by
@acronym{ERE}; Since matches are not lazy, what would be a simple
@acronym{PCRE} expression can turn into a multi-line affair in
@acronym{ERE} if there is any kind of nesting/multiple lines/etc
involved. Instead, we can use incremental and recursive steps to achieve
a complex edit, which makes each individual regexp simpler… at the
expense of making the overall procedure call much less efficient, as we
are now compiling multiple regexps under the hood.

In short: If You can get away with a single regexp instead of this
function, it's likely better to do so. But if not, this function allows
a way around stuff like
@code{"([^H]|H[^T]|HT[^T]|HTT[^P]|HTTP[^/]|HTTP/[^1]|HTTP/1[^.]|HTTP/1\\.[^1])*HTTP/1\\.1"}
to replace only up to the next occurence of "HTTP/1.1". This can be done
here like so:

@lisp
(define test-string "TEST 127.0.0.1 GET /test.php HTTP/1.1\" 404 525
\"-\" \"Mozilla/5.0 (Windows NT HTTP/1.1 TEST")

;;; Really long ERE, but only one regexp compile
(regexp-substitute #f
                   (string-match
                        "([^H]|H[^T]|HT[^T]|HTT[^P]|HTTP[^/]|HTTP/[^1]|HTTP/1[^.]|HTTP/1\\.[^1])*HTTP/1\\.1"
                        test-string)
                   'pre
                   " "
                   'post) @result{}
" \" 404 525\n\"-\" \"Mozilla/5.0 (Windows NT HTTP/1.1 TEST"

;;; Using this function instead: Much easier to understand and debug,
;;; but involves 3 regexp compiles instead to get the same result.
(apply-recursive-regex-replacement
        test-string
        '(("Windows NT HTTP/1\\.1" "aaaaaa")
          (".*HTTP/1\\.1" " ")
          ("aaaaaa" "Windows NT HTTP/1.1"))) @result{}
" \" 404 525\n\"-\" \"Mozilla/5.0 (Windows NT HTTP/1.1 TEST"
@end lisp

Note that this also allows for global replacements, instead of just
singular ones: the longer example above will still produce the wrong
result if applied globally, due to the character set that's matched (it
will replace the correct match, which is what we want, but then also
replace the second match, which is the same as if we had just matched
".*HTTP/1.1" in the first place). Whereas the shorter one, due to
applying multiple replacements, can handle global replacements so long
as the data is predictable.
@end deffn
@c *********************************************************************
@deffn {Scheme Procedure} remove-c-multiline-comments-from-string
@code{original-string}
@ref{CALCULATION}

Remove all C-style multiline comments from @code{original-string}.

Such a comment looks like this:

@example
/** This
  * Is
  * a
  * Comment.
  */
@end example

They are used in C, C++, Java, and more. They are also the vector for
Javadoc and Doxygen in-file documentation. This procedure strips them
from the code, allowing a tangled version of the code to be referenced
or compiled.

@lisp
(use-modules (cdr255 userlib))

(define test-string "test /** This
  * Is
  * a
  * Comment.
  */ successful")
(remove-c-multiline-comments-from-string test-string) @result{}

"test  successful"
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} iteratively-replace-regexp
@code{regexp} @code{original-list} @code{replacement-list}
@ref{CALCULATION}

Replace all matches of @code{regexp} in each member of
@code{original-list} with each member of @code{replacement-list},
keeping all permutations.

Useful for generating strings from a template, using @acronym{ERE} as a
target to replace.

@lisp
(use-modules (cdr255 userlib))

(define test-list-orig '("Hello" "Jello" "Mello"))
(define test-list-replace '("" "ey" "(ell)"))
(iteratively-replace-regexp "ell" test-list-orig test-list-replace) @result{}

'("Ho" "Jo" "Mo" "Heyo" "Jeyo" "Meyo" "H(ell)o" "J(ell)o" "M(ell)o")
@end lisp
@end deffn

@c *********************************************************************
@deffn {Scheme Procedure} remove-empty-strings
@code{original-list}
@ref{CALCULATION}

Remove all empty string from @code{original-list}.

These might be the result of sloppy filtering, or user input, or empty
fields in files. Either way, this procedure removes them.

@lisp
(use-modules (cdr255 userlib))

(define test-list '("Here's a" "" " list of " "" "Strings."))
(remove-empty-strings test-list) @result{}

'("Here's a" " list of " "Strings.")
@end lisp
@end deffn

@c *********************************************************************
@node Game Tools, Dice, Userlib, Top
@chapter Game Tools
This module is specifically supposed to collect procedures useful for
making or playing games.

@menu
* Dice::     Tools for Constrained Random Number Generation.
@end menu

@c *********************************************************************
@node Dice, Combinators, Game Tools, Game Tools
@section Dice
Rolling random numbers and using the results is one of the simplest
tools used in game design. These procedures all center around making
'rolls' based on a random number generator, modifying them, and
outputting the results.

@c *********************************************************************
@subsection What is a diceroll?
@cindex diceroll
@anchor{diceroll}

Before we can make any rolls, we need to define what exactly a
@code{diceroll} is. In terms of this library, a @code{diceroll} record
is defined as follows:

@enumerate

@item
A @code{diceroll} is a SRFI-9 record that has 6 fields and no setters for
those fields after creation.
@item
The 6 fields in a @code{diceroll} record are @code{dicestring},
@code{dicelist}, @code{modifier}, @code{modop}, @code{resultlist}, and
@code{result}.
@item
A @code{diceroll} can be expressed as a string in the form "XdYZA", where
X, Y, and A are integers and Z is an arithmetic operation in the set
@{addition, subtraction, multiplication, division, modulus@}, or
@{+,-,*,/,%@}. X is the number of "dice" to roll. Y is the number of
sides per die. And A is a constant for the right side of the
operation. The "ZA" portion can be left off, in which case the dice are
rolled as is.
@item
The abovementioned string is the @code{dicestring} for the @code{diceroll}.
@item
The @code{dicestring} is parsed during creation into a list in the form
@code{'(count, sides, modifier)}. This list is the @code{dicelist} for
the @code{diceroll}.
@item
The @code{modifier} is pulled from the @code{dicelist} and stored
separately, as it is not random and therefore can be preserved as is.
@item
The @code{modop} is calculated by interpreting the character used and
looking up the equivalent operation, which is stored as a procedure.
@item
The @code{resultlist} is calculated during the creation of the
@code{diceroll} by "rolling" dice according to the @code{dicelist}
mentioned above.
@item
The @code{result} is calclulated by taking the sum of all of the members
of the @code{resultlist}, and the @code{modifier}, and applying the
@code{modop} to them.
@item
The above six fields are referenced in the resulting @code{diceroll}
using the appropriate accessor functions in the table below.
@end enumerate

The following table assumes that a @code{diceroll} named @samp{foo}
exists. This outlines the functions used to access the fields defined
above. An Example is included below the definition, assuming @samp{foo}
was created using the @code{dicestring} @samp{"1d4+1"}, with the roll of the
single die resulting in a @samp{3}.

@ftable @code
@item (diceroll-string @samp{foo})
Return the @code{dicestring} of @samp{foo}.

@emph{Example: @samp{"1d4+1"}}
@item (diceroll-list @samp{foo})
Return the @code{dicelist} of @samp{foo}.

@emph{Example: @samp{1, 4, 1}}
@item (diceroll-modifier-value @samp{foo})
Return the @code{modifier} of @samp{foo}.

@emph{Example: @samp{1}}
@item (diceroll-modifier-operation @samp{foo})
Return the @code{modop} of @samp{foo}.

@emph{Example: @samp{#<procedure +>}}
@item (diceroll-results @samp{foo})
Return the @code{resultlist} of @samp{foo}.

@emph{Example: @samp{'(3)}}
@item (diceroll-value @samp{foo})
Return the @code{result} of @samp{foo}.

@emph{Example: @samp{4}}
@end ftable

@c *********************************************************************
@node Combinators, Basics, Game Tools, Top
@chapter Combinators

Combinators come from Combinatory Logic, which Moses Schönfinkel and
Haskell Curry solidified in the 20th century and many (including Raymond
M. Smullyan and his "To Mock a Mockingbird" book) have expanded upon and
refined up to and through this day.

In essence, a combinator is a specific way to @emph{combine}—hence the
name—procedures together. One might think of them as pipes between
functions, or as higher-order functions, or as logic-obsessed birds, but
in the end they really are patterns with which procedures might be
combined to do anything.

And yes, combinatory logic is Turing-Complete.

@menu
* Basics::                       S, K, I, B, C, W.
@end menu

@c *********************************************************************
@node Basics, Concept Index, Combinators, Combinators
@section Basics

What follows are the combinators considered by some to be fundamental:
The SKI and BCW combinators will all eventually be here.

@c *********************************************************************
@deffn {Scheme Procedure} bluebird
@code{action} @code{procedure}
@ref{CALCULATION}

Create a procedure that is equivalent to applying @code{procedure} on
some arguments, and then applying @code{action} on the result.

Also known as the B Combinator, @code{S(KS)K}, @code{λabc.a(bc)},
@code{atop}, and @code{a => b => c => a(b(c))}.

The parameters are so named because a common use (for me) of the
bluebird combinator is to "wrap" procedures with @code{display} or
@code{format}. This isolates the @ref{ACTION} from the
@ref{CALCULATION}, allowing complex code to be free of side-effects. It
also saves a lot of repetitious code.

@lisp
(use-modules (cdr255 combinators))

(define display-addition
        (bluebird display +))
(display-addition 2 5) @result{}

#<undefined> (the result of "7" is printed to the screen.)
@end lisp
@end deffn

@c *********************************************************************
@node Concept Index, Programming Index, Game Tools, Top
@chapter Concept Index
@printindex cp

@c *********************************************************************
@node Programming Index, Procedure Types, Concept Index, Top
@chapter Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@c *********************************************************************
@node Procedure Types, GNU FDL, Environment Variables, Top
@cindex Procedure Types
@include procedure-types.texi

@c *********************************************************************
@node GNU FDL, , Procedure Types, Top
@appendix GNU Free Documentation License
@cindex license, GNU Free Documentation License
@include fdl-1.3.texi

@c *********************************************************************
@bye
