#!@GUILE@ \
-s
!#
;; bin/set-gitconfig --- set a git config
;;
;; Copyright (C) 2022 Christopher Rodriguez <yewscion@gmail.com>
;;
;; Author: Christopher Rodriguez <yewscion@gmail.com>
;;
;; This file is part of the cdr255 library.
;;
;; set-gitconfig is free software; you can redistribute it and/or modify it
;; under the terms of the GNU Affero General Public License as published by the
;; Free Software Foundation; either version 3 of the License, or (at your
;; option) any later version.
;;
;; set-gitconfig is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU Affero General Public License along with
;; the cdr255 library; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org
;;; Commentary:
;;
;;; Code:

(use-modules (ice-9 textual-ports)
             (ice-9 string-fun)
             (cdr255 userlib))
(define profile-input (get-file-as-string
                       (dereference-env-in-string "HOME"
                                                  "$HOME/.profile")))
(define home-environment-input (dereference-env-in-string "HOME" profile-input))
(define home-environment (assignment-string->assignment-list
                          home-environment-input))
(set-env-from-list (list (car home-environment)))
(define environment-input (get-file-as-string
                           (dereference-env-in-string
                            "HOME_ENVIRONMENT"
                            "$HOME_ENVIRONMENT/setup-environment")))
(define environment
  (dereference-envs-in-assignment-list
   '("HOME_ENVIRONMENT" "HOME")
   (remove-substring-from-assignment-list
    "\""
    (assignment-string->assignment-list environment-input))))
(map (lambda (x) (setenv (car x) (cadr x))) environment)
(define my-gitconfig-variables
  (eval-string (get-file-as-string (dereference-env-in-string
                                    "HOME"
                                    "$HOME/.config/gitconfig.scm"))))
(define config-strings (map (lambda (x)
                              (string-append (symbol->string (car x))
                                             "."
                                             (symbol->string (cadr x))
                                             " \""
                                             (caddr x)
                                             "\""))
                            my-gitconfig-variables))
(for-each
 (lambda (x)
   (display x)
   (newline)
   (cond ((eq? x '())
          (display "All Done!"))
         (else
          (system
           (string-append
            "git config --global "
            x)))))
         config-strings)

;; Local Variables:
;; mode: scheme
;; coding: utf-8-unix
;; End:
